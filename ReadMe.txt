1. В процессе реализации задания была предпринята попытка решения в виде законченного программного продукта с потенциальной возможностью дальнейшего расширения проекта.

2. В качестве СУБД использована Sqlite, т.к. SQL Express бесперспективен и неудобен в обслуживании внешним ПО. Кроме того, модулем DbConfigure предусмотрен простейший переход на PostgreSQL.

3. Приложение (решение) разбито на 4 уровня: Tests (вспомогательный) - тесты, App - уровень приложения и интерфейса, Domane - доменный, Infrastructure - уровень инфраструктуры.

3.1. уровень App.
    Проект Main - основная часть приложения, где расположена точка входа в приложения - Program, Контроллеры и Представления, а также папка App_Data, в которой расположена БД Main.sqlite (можно было расположить БД на более внешний, по отношению к проекту, уровень, но в рамках данного задания это представлялось нецелесообразным, т.к. сопряжено с определенными трудностями). Контроллеров 4 шт.: Buyer - отвечает за работу с покупателем, Admin - за работу с администратором, Login - аутентификация и авторизация, Error - отображение фатальных ошибок. Основных Представлений 3 шт.: Buyer (с частичными представлениями), Admin (аналогично) и Login; кроме того, в папке Shared представления Error и License.
    Проект AppInitializer предназначен для инициализации приложения (в нашем случае - по сути только БД).
    Слой (папка) Infrastructure.
        Проект Authorization - реализует аутентификацию и авторизацию посредством JWT-токенов. Необходимые для этого Модель и сущности расположены здесь же.
        Проект DbConfigure - конфигурирует БД. Реализована стратегия выбора необходимого класса опций конкретного провайдера БД.
        Проект Middlewares - промежуточные слои. В нашем случае 2 класса, необходимые при аутентификации и авторизация (записывают JWT-токен в заголовок HTTP-запроса).

3.2. Уровень Domane (предметная область).
    На данном уровне расположена бизнес-логика, Модели и сущности предметной области.
    Проект Models содержит модели, используемые Контроллерами из уровня App. Модели BuyerModel, AdminModel реализуют всю бизнес-логику, по сути являясь агрегатами (попытка использовать DDD).
    Проект DbContexts - контекст БД, посредством которого происходит работа EF Core.
    Проект Entities - сущности предметной области: Drink (напиток), Coin (монета), PurchasePart (часть покупки, выраженная количеством одного номинала монеты; вообще говоря, для решения поставленной задачи сущность PurchaseParts в БД не нужна, она добавлена в БД с целью логической стройности приложения и возможности анализа покупок).

3.3. Уровень Infrastructure.
    Вспомогательный уровень - всевозможные вспомогательные классы и методы расширения, которые (практически в такой же форме) используются мной почти во всех разрабатываемых приложениях.

4. Приложение сделано в среде разработки JetBrains Rider. Использовался net 7.0 (core), c# 11.0. Выполнены все необязательные требования (заодно реализован и экспорт напитков).


ПРИМЕЧАНИЯ:
1. В дополнении к соответствующему п. задания, реализована полноценная аутентификация и авторизация посредством JWT-токенов (используется отдельная веб-страница входа в систему; логин - Admin, пароль - 12345). Понятно, что авторизация посредством строки запроса URL небезопасна (и это сделано только для упрощения задания), поэтому и было принято решение о реализации полноценной авторизации (JWT-токен сохраняется в куках), способ авторизации выбирается на странице входа в систему. Замечу, что при авторизации посредством строки запроса URL, на страницу администратора можно попасть, пока не "умрет" токен (задано 5 минут), даже если пользователь вышел из системы (заморачиваться со списком невалидных токенов мне представлялось нецелесообразным).  

2. Миграции решил не использовать, т.к. структура БД очень простая. БД создается при инициализации приложения, если файл базы отсутствует.

3. Все классы, свойства и методы подробно прокомментированы.
